# Copyright (c) 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---

- include: create-inventory.yml

- hosts: localhost
  vars:
    bosh_deployment_directory: "{{ ansible_env['HOME'] }}/{{ stack }}-bosh"
  vars_files:
    - defaults/proxy.yml
  tasks:
    - add_host:
        name: nginx
        groups: nginx
        ansible_ssh_host: "{{ hostvars[item.1]['ansible_ssh_host'] }}"
        ansible_ssh_user: ubuntu
      with_indexed_items: "{{ groups['tag_Name_NGINX'] | default([]) }}"
      when: "{{ provider == 'aws' }}"

    - add_host:
        name: nginx
        groups: nginx
        ansible_ssh_host: "{{ hostvars[item.1]['openstack']['private_v4'] }}"
        ansible_ssh_user: ubuntu
      with_indexed_items: "{{ groups['NGINX'] | default([]) }}"
      when: "{{ provider == 'openstack' }}"

    - set_fact:
        docker_manifest_file: "{{ ansible_env['HOME'] }}/docker-broker.yml"

    - set_fact:
        docker_manifest: "{{ lookup('file', docker_manifest_file) | from_yaml }}"

    - set_fact:
        docker_plans: "{{ docker_manifest.properties.broker.services }}"
        docker_ip: "{{ docker_manifest.networks[0].subnets[0].static[0] }}"

    - set_fact:
        docker_url: tcp://{{ docker_ip }}:4243

    - name: change bosh director version in manifest
      replace:
        dest: "{{ bosh_deployment_directory }}/bosh.yml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: 'bosh\?v\=245', replace: 'bosh?v=250' }
        - { regexp: 'd5a108cf32c64a4d0f69bc2b2d8535ac1203f03c', replace: '11b318d4ec9f0baf75d8afc6f78cf66f955d459f' }

    - name: deploy bosh director
      shell: bosh-init deploy ./bosh.yml chdir={{ bosh_deployment_directory }}

    - name: change docker images
      replace:
        dest: "{{ ansible_env['HOME'] }}/docker-broker.yml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: "image: 'trustedanalytics/mosquitto'", replace: "image: 'quay.io/trustedanalytics/trustedanalytics-mosquitto'" }
        - { regexp: "image: 'orientdb/orientdb'\n([ ]*)tag: 'latest'", replace: "image: 'orientdb'\n\\1tag: '2.1.16'" }

    - shell: "docker login -u {{ quay_io_username }} -p {{ quay_io_password }} -e test@test quay.io"
      ignore_errors: True
      register: docker_login
      environment:
        DOCKER_HOST: "{{ docker_url }}"
      when: quay_io_username and quay_io_password

    #fallback to building images when cannot login into quay
    - set_fact:
        quay_io_username: ""
        quay_io_password: ""
      when: docker_login|failed

    #docker_image doesn't work for downloading images only: https://github.com/ansible/ansible-modules-core/issues/2991
    - name: download non-quay images when no quay username provided
      shell: "docker pull {{ item.1.container.image }}:{{ item.1.container.tag }}"
      environment:
        DOCKER_HOST: "{{ docker_url }}"
      register: shell_result
      changed_when: not shell_result.stdout | search("Image is up to date")
      with_subelements:
        - "{{ docker_plans }}"
        - plans
      when: (not quay_io_username or not quay_io_password) and not "quay" in item.1.container.image

    - name: download all images when quay username provided
      shell: "docker pull {{ item.1.container.image }}:{{ item.1.container.tag }}"
      environment:
        DOCKER_HOST: "{{ docker_url }}"
      register: shell_result
      changed_when: not shell_result.stdout | search("Image is up to date")
      with_subelements:
        - "{{ docker_plans }}"
        - plans
      when: quay_io_username and quay_io_password

    - include: docker_images_build.yml

    - docker:
        name: registrator
        image: gliderlabs/registrator:v6
        memory_limit: 256000000
        restart_policy: always
        restart_policy_retry: 0
        command: -resync 3600 -ip {{ docker_ip }} consul://cdh-master-0.node.consul:8080
        volumes:
          - /var/vcap/data/sys/run/docker:/tmp/docker
        env:
          DOCKER_HOST: unix:///tmp/docker/docker.sock
        docker_api_version: 1.21
        docker_url: "{{ docker_url }}"

    - docker:
        name: registry
        image: registry:2.4.0
        memory_limit: 1024000000
        restart_policy: always
        restart_policy_retry: 0
        ports:
        - 5000:5000
        env:
          STORAGE_PATH: /registry
          SETTINGS_FLAVOR: local
        volumes:
        - /var/vcap/data/registry:/registry
        docker_api_version: 1.21
        docker_url: "{{ docker_url }}"

    - docker:
        name: h2oprovisioner
        image: quay.io/trustedanalytics/h2o-provisioner:0.7.2
        memory_limit: 1024000000
        restart_policy: always
        restart_policy_retry: 0
        ports:
          - 9876:8080
          - 54310:54310
          - 54311:54311
          - 54312:54312
          - 54313:54313
          - 54314:54314
          - 54315:54315
          - 54316:54316
          - 54317:54317
          - 54318:54318
          - 54319:54319
        env:
          DRIVER_PORT_LOWER: 54310
          DRIVER_PORT_HIGHER: 54319
          DRIVER_IP: "{{ docker_ip }}"
          KRB_KDC: cdh-master-2.node.consul
          KRB_REALM: CLOUDERA
          KRB_USER: cf
          KRB_PASSWORD: cf1
        docker_api_version: 1.21
        docker_url: "{{ docker_url }}"

    - name: deploy docker changes
      shell: source /usr/local/rvm/scripts/rvm && bosh --no-color -n -d {{ ansible_env['HOME'] }}/docker-broker.yml deploy
      args:
        executable: /bin/bash

- hosts: cdh-master[0]
  tasks:
    - name: init kerberos if enabled
      ekerberos: usr='{{ item.usr }}' pass='{{ item.pass }}'
      delegate_to: '{{ groups["cdh-master"][0] }}'
      when: kerberos_enabled|bool
      with_items:
        - { usr: 'hdfs', pass: '{{ kadmin_pass }}' }

    - name: create dirs on hadoop
      hdfs: dir={{ item.dir }} owner={{ item.owner }} mode={{ item.mode }} group={{ item.group }}
      with_items:
        - { dir: '/user/hbase', owner: 'hbase', group: 'supergroup', mode: '755' }
        - { dir: '/h2o', owner: 'h2o', group: 'intel', mode: '755' }

- hosts: cdh-manager
  tasks:
    - name: set hive service properties
      cdh: action=set_config entity=service service=hive name={{ item.name }} value={{ item.value }}
      with_items:
        - { name: 'spark_on_yarn_service', value: 'SPARK_ON_YARN' }

- hosts: consul-master
  become: true
  vars_files:
    - defaults/consul.yml
    - defaults/proxy.yml
    - defaults/env.yml
  tasks:
    - set_fact:
        docker_manifest_file: "{{ ansible_env['HOME'] }}/docker-broker.yml"

    - set_fact:
        docker_manifest: "{{ lookup('file', docker_manifest_file) | from_yaml }}"

    - set_fact:
        broker_0_ip: "{{ docker_manifest.networks[0].subnets[0].static[0] }}"

    - name: create config
      template:
        src: roles/consul_base_server/templates/nginx_default.conf.j2
        dest: /etc/nginx/conf.d/default.conf

    - name: restart required services
      become: true
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - consul
        - unbound
        - nginx

- hosts: nginx
  become: true
  tasks:
    - name: copy mosquitto templates
      copy:
        src: "{{ item }}"
        dest: "/opt/consul-template/templates/"
      with_items:
        - "mosquitto-services-1883.ctmpl"
        - "mosquitto-services-9001.ctmpl"

    - name: add mosquitto to consule template config
      blockinfile:
        dest: /opt/consul-template/config/consul-template.cfg
        block: |
          template {
            source = "/opt/consul-template/templates/mosquitto-services-1883.ctmpl"
            destination = "/etc/nginx/conf.d/stream/mosquitto-services-1883.conf"
            command = "service nginx reload"
          }

          template {
            source = "/opt/consul-template/templates/mosquitto-services-9001.ctmpl"
            destination = "/etc/nginx/conf.d/stream/mosquitto-services-9001.conf"
            command = "service nginx reload"
          }

    - name: restart required services
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - consul
        - consul-template
        - nginx

