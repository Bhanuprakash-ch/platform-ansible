# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

-
  name: "create OS user account for Arcadia"
  user:
    name: "{{ arcadia.sysuser.name }}"
    shell: "{{ arcadia.sysuser.shell }}"
    comment: "{{ arcadia.sysuser.desc }}"
    groups: "{{ arcadia.sysuser.groups.masternode }}"
    append: "yes"
    system: "yes"
    generate_ssh_key: "yes"
    ssh_key_type: "{{ arcadia.sysuser.key_type }}"
    ssh_key_bits: "{{ arcadia.sysuser.key_size }}"
  register: "arcadia_user"
-
  name: "check for obsoleted software package files"
  shell: "ls {{ arcadia_user.home }}/arcadia/downloads/*.rpm /tmp/arc*rpm /opt/arcadia/tools/dist/packages/*.rpm;true"
  register: "obsoleted_rpms"
#  ignore_errors: "True"
  changed_when: "False"
-
  name: "clean up obsoleted software package files"
  file:
    path: "{{ item }}"
    state: "absent"
  with_items: "{{ obsoleted_rpms.stdout_lines }}"
-
  name: "manage arcadia masternode required OS packages"
  yum:
    name: "{{ item }}"
    state: "latest"
    enablerepo: "arcadia-base"
  with_items: "{{ arcadia.yum_packages.masternode }}"
- 
  name: "prepare arcadia setup artifacts path"
  file: 
    path: "{{ arcadia_user.home }}/arcadia/downloads"
    state: "directory"
    mode: "0755"
    owner: "{{ arcadia.sysuser.name }}"
    group: "{{ arcadia.sysuser.name }}"
- 
  name: "enable arcadia yum repo for yumdownloader"
  shell: "yum-config-manager --enable arcadia-base"
  sudo: "yes"
- 
  name: "gather arcadia package urls"
  shell: "yumdownloader -q --urls {{ item }}| grep '://.*rpm'"
  with_items: "{{ arcadia.packages }}"
  register: "yumdownloader_out"
  changed_when: "False"
- 
  name: "disable arcadia yum repo"
  shell: "yum-config-manager --disable arcadia-base"
  sudo: "yes"
- 
  name: "prepare arcadia setup files"
  get_url: 
    url: "{{ item.stdout }}"
    dest: "{{ arcadia_user.home }}/arcadia/downloads"
    validate_certs: "no"
  with_items: "{{ yumdownloader_out.results }}"
  environment: "proxy_env"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
- 
  name: "set up arcadia cluster definition"
  template: 
    src: "this.j2"
    dest: "{{ arcadia_user.home }}/.acli/conf/clusters/this"
    owner: "{{ arcadia.sysuser.name }}"
    group: "{{ arcadia.sysuser.name }}"
    mode: "0644"
-
  name: "initiate arcadia cluster step #1"
  command: "/usr/bin/acli cluster setactive this"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
-
  name: "initiate arcadia cluster step #2"
  command: "/usr/bin/acli node run 'sudo /usr/bin/acli --configpath=/home/arcadia-user/.acli/conf/ cluster populatenoderoles'"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
-
  name: "install CDH Hive config"
  command: "/usr/bin/acli node run unzip -o config.zip"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
- 
  name: "set up arcadia on hadoop"
  command: "acli install setup_onhadoop"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
  ignore_errors: "True"
- 
  name: "initialize arcadia webinterface"
  command: "acli -n 1 install webinterface"
  sudo: "yes"
  sudo_user: "{{ arcadia.sysuser.name }}"
-
  name: "kerberos hack for statestore startup"
  lineinfile:
    dest: "/opt/arcadia/tools/arccluster/procmon/init.d/arcengine/start-statestore-fg.sh"
    insertbefore: '^for\sARG\sin'
    line: 'STATESTORE_ARGS="${STATESTORE_ARGS} --kerberos_reinit_interval=60 --principal={{ arcadia.sysuser.name }}/{{ inventory_hostname }}@{{ arcadia.kerberos.realm }} --keytab_file={{ arcadia_user.home }}/{{ arcadia.kerberos.client_keytabfile }}"'
  when: kerberos_enabled|bool
-
  name: "kerberos hack for catalogd startup"
  lineinfile:
    dest: "/opt/arcadia/tools/arccluster/procmon/init.d/arcengine/start-catalogd-fg.sh"
    insertbefore: '^for\sARG\sin'
    line: 'CATALOGD_ARGS="${CATALOGD_ARGS} --kerberos_reinit_interval=60 --principal={{ arcadia.sysuser.name }}/{{ inventory_hostname }}@{{ arcadia.kerberos.realm }} --keytab_file={{ arcadia_user.home }}/{{ arcadia.kerberos.client_keytabfile }}"'
  when: kerberos_enabled|bool
