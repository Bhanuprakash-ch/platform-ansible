# Copyright (c) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#deploying hdfs
#this is the right order, first we have to add DNs, since we need them for NN format later on
- name: deploy hdfs dn
  cdh: action=deploy_service_worker_nodes service=hdfs host={{ item }}
  with_items: groups['cdh-worker']

- name: set hdfs service properties
  cdh: action=set_config entity=service service=hdfs name={{ item.name }} value={{ item.value }}
  with_items:
    - { name: 'dfs_replication', value: 3 }
    - { name: 'dfs_permissions', value: 'true' }
    - { name: 'dfs_block_local_path_access_user', value: 'impala,hbase,mapred,spark' }
    - { name: 'hue_kerberos_principal_shortname', value: 'hue' }
    - { name: 'dfs_namenode_acls_enabled', value: 'true' }
    - { name: 'core_site_safety_valve', value: '<property><name>hadoop.security.groups.cache.secs</name><value>1</value></property><property><name>hadoop.http.staticuser.user</name><value>mapred</value></property>' }
    - { name: 'hdfs_service_config_safety_valve', value: '<property><name>dfs.web.ugi</name><value>hdfs</value></property><property><name>dfs.namenode.fs-limits.max-component-length</name><value>4096</value></property>' }

- name: override replication for one node install
  cdh: action=set_config entity=service service=hdfs name=dfs_replication value=1
  tags:
    - one_node_install_only

- name: set namenode role properties
  cdh: action=set_config entity=role service=hdfs role=namenode name={{ item.name }} value={{ item.value }}
  with_items:
    - { name: 'dfs_name_dir_list', value: "{{ hostvars[groups['cdh-master'][0]]['ansible_local'].device_info.name_dirs }}" }
    - { name: 'dfs_namenode_handler_count', value: 30 }

- name: set secondary namenode role properties
  cdh: action=set_config entity=role service=hdfs role=secondarynamenode name={{ item.name }} value={{ item.value }}
  with_items:
    - { name: 'fs_checkpoint_dir_list', value: "{{ hostvars[groups['cdh-master'][0]]['ansible_local'].device_info.secondary_dirs }}" }

- name: set hdfs role properties
  cdh: action=set_config entity=role service=hdfs role=datanode name={{ item.name }} value={{ item.value }}
  with_items:
    - { name: 'dfs_data_dir_list', value: "{{ hostvars[groups['cdh-worker'][0]]['ansible_local'].device_info.data_dirs }}" }
    - { name: 'dfs_datanode_handler_count', value: 30 }
    - { name: 'dfs_datanode_du_reserved', value: 1073741821 }
    - { name: 'dfs_datanode_failed_volumes_tolerated', value: 0 }

- name: set hdfs role if kerberos is disabled
  cdh: action=set_config entity=role service=hdfs role=datanode name={{ item.name }} value={{ item.value }}
  when: not kerberos_enabled|bool
  with_items:
    - { name: 'dfs_datanode_data_dir_perm', value: 755 }

- name: set hdfs role if kerberos is enabled
  cdh: action=set_config entity=role service=hdfs role=datanode name={{ item.name }} value={{ item.value }}
  when: kerberos_enabled|bool
  with_items:
    - { name: 'dfs_datanode_data_dir_perm', value: 700 }

- name: deploy hdfs namenode and secondary namenode
  cdh: action=deploy_hdfs_base nn_host={{ groups['cdh-master'][0] }} sn_host={{ groups['cdh-master'][1] }} 
  tags: 
    - skip_on_one_node_install

- name: deploy hdfs namenode and secondary namenode
  cdh: action=deploy_hdfs_base nn_host={{ groups['cdh-master'][0] }} sn_host={{ groups['cdh-master'][0] }}
  tags: 
    - one_node_install_only

- name: start hdfs service
  cdh: action=service service=hdfs state=started

- name: enable ha on hdfs 
  cdh: action=deploy_hdfs_ha sn_host={{ groups['cdh-master'][1] }} jn1_host={{ groups['cdh-master'][0] }} jn2_host={{ groups['cdh-master'][1] }} jn3_host={{ groups['cdh-master'][2] }} jn_dir={{ hostvars[groups['cdh-master'][0]]['ansible_local'].device_info.journal_dir }}
  tags:
    - skip_on_one_node_install

- name: install httpfs on hdfs
  cdh: action=deploy_hdfs_httpfs host={{ groups['cdh-master'][1] }}
  notify: 
    - restart hdfs
  tags:
    - skip_on_one_node_install

- name: install httpfs on hdfs
  cdh: action=deploy_hdfs_httpfs host={{ groups['cdh-master'][0] }}
  notify: 
    - restart hdfs
  tags: 
    - one_node_install_only

- meta: flush_handlers

- name: init kerberos if enabled
  ekerberos: usr='{{ item.usr }}' pass='{{ item.pass }}'
  delegate_to: '{{ groups["cdh-master"][0] }}'
  when: kerberos_enabled|bool
  with_items:
    - { usr: 'hdfs', pass: '{{ kadmin_pass }}' }

- name: create dirs on hadoop
  hdfs: dir={{ item.dir }} owner={{ item.owner }} mode={{ item.mode }} group={{ item.group }}
  delegate_to: '{{ groups["cdh-master"][0] }}'
  with_items:
    - { dir: '/org', owner: 'authgateway', group: 'supergroup', mode: '701' }
    - { dir: '/org/intel', owner: 'cf', group: 'intel', mode: '755' }
    - { dir: '/org/intel/hdfsbroker', owner: 'cf', group: 'intel', mode: '771' }
    - { dir: '/org/intel/hdfsbroker/userspace', owner: 'cf', group: 'intel', mode: '771' }
    - { dir: '/org/intel/users', owner: 'cf', group: 'intel', mode: '775' }
    - { dir: '/org/intel/tmp', owner: 'cf', group: 'intel', mode: '777' }
    - { dir: '/user', owner: 'mapred', group: 'supergroup', mode: '755' }
    - { dir: '/user/cf', owner: 'cf', group: 'cf', mode: '755' }
    - { dir: '/user/history', owner: 'mapred', group: 'supergroup', mode: '777' }
    - { dir: '/user/hive', owner: 'hive', group: 'supergroup', mode: '755' }
    - { dir: '/user/atkuser', owner: 'vcap', group: 'supergroup', mode: '755' }
    - { dir: '/user/vcap', owner: 'vcap', group: 'supergroup', mode: '755' }
    - { dir: '/user/root', owner: 'root', group: 'intel', mode: '755' }
